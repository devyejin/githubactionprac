# workflow 이름
name: deploy service

# 워크플로우를 자동으로 실행할 이벤트를 정의
on:
  # main 브랜치에 push라는 이벤트가 발생할 때 작업을 실행하겠다
  push:
    branches:
      - main

#실행될 작업들을 정의
jobs:
  # 작업 이름
  deploy:
    # 작업이 발생될 Guthub Workspace 실행 환경
    runs-on: ubuntu-24.04

    #실제로 실행될 작업 내부 단계
    steps:
      # 내 원격저장소(repo)에 있는 프로젝트를 Workspace로 가져온다
      - name: Checkout code
        uses: actions/checkout@v4

      # 액션 시작 알림 메세지
      - name: Start Message
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: : 🚀 "배포 시작"

      # 캐시 저장 설정을 위한 action(라이브러리)
      - name: Cache Docker Image Layer
        # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          # docker-compose에서 정의해놓은 경로
          path: /tmp/.build-cache
          # workspace의 cache 저장공간에 다양한 cache가 저장되므로 식별하는 식별자
          # 캐싱을 오버라이딩하는게 아니라 쌓이므로 별개의 이름을 지정해줘야 함
          key: docker-image-layer-cache-${{ github.sha }}
          restore-keys: docker-image-layer-cache

      # ssh 관리를 쉽게 하기 위해 ssh-agent 를 사용
      - name: run ssh-agnet
        # action 사용법은 해당 문서를 참고하며 사용해야 함
        # 이 라이브러리(?)를 개발한 사람이 규정한 문법이니 지켜야 함
        # Make sure the @v0.9.0 matches the current version of the action
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Guthub Actions Workspace입장에서 EC2와의 FINGERPRINT 작업이 필요(믿을 수 있는 환경이니?)
      - name: Add Remote Server Fingerprint to Known Hosts
        # 내 repo에 등록해 놓은 키를 known_hosts (Guthub Actions Workspace에서 원격 서버들의 지문을 저장하는 공간) 에다가 저장
        run: ssh-keyscan -H -p ${{secrets.SSH_PORT}} ${{secrets.SSH_HOST}} >> ~/.ssh/known_hosts || true

      # 1. 환경변수 파일을 생성하고 내용을 작성한다
      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env

      # 도커 Buildkit 엔진 설정 action(라이브러리)
      - name: Set up Docker Buildx
        # setup-buildx-action : 워크스페이스에 Buildkit 엔진을 설치하는 action(라이브러리)
        # buildx = BuildKit
        uses: docker/setup-buildx-action@v3

      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구) 생성 -
      # -> 기존 도커 빌더 :  Cache 파일 저장&불러오기 경로를 개발자가 제어 불가 so, buildkit이 만든 빌더를 사용
      # - name: Create Buildkit Bulder
      #   # 1. 빌더(buildkit)를 생성하는 명령어
      #   # 2. 빌더(buildkit) 설정 명령어
      #   run: |
      #     docker buildx create --use --name buildkit
      #     docker buildx use buildkit

      # checkout 해온 프로젝트를 이미지로 빌드하겠다. (빌드할 때 환경변수가 필요할 수 있으므로 사전작업으로 생성)
      - name: Docker Image Build
        # 명령어 체계가 다르다 docker-compose 아님
        # 빌더가 변경되었으므로  파일명이 변경되어야 함
        run: docker compose -f docker-compose-actions-cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      # 빌드 -> 로그인 -> push
      - name: Docker Image Push
        run: docker compose -f docker-compose-actions-cache.yml push

      # .env 와 docker-compose.yml 파일들을 ec2의 ~/work-directory로 복사한다, secure 이용해서
      # why? ec2에서 이미지를 pull해와서 docker-compose up 하기위해 필요하니까
      # 보안된 상태로 복사하는 작업이라 scp-action
      - name: Copy .env 와 docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose-actions-cache.yml, .env"
          target: "~/work-directory"

      # ssh 명령을 하는거라 ssh-action
      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # -f 옵션, default가 아닌 docker-compose.yml 파일명 명시할 때
          script: |
            cd ~/work-directory
            docker-compose -f docker-compose-actions-cache.yml  pull
            docker-compose -f docker-compose-actions-cache.yml down
            docker-compose -f docker-compose-actions-cache.yml up -d

      # Discord 알림 - 배포 성공
      - name: End Message - Success
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: :"👍 배포 종료 - 성공"
          color: 0x7aa3f4

      # Discord 알림 - 배포 실패
      - name: End Message - failure
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: :"❌ 배포 종료 -  실패"
          color: 0xf697d2
